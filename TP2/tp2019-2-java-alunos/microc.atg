/*
	microc
*/

COMPILER microc

CHARACTERS
	semAspas 	= ANY - '"'.
	letra 		= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".
	digito 		= "0123456789".

TOKENS
	id 		    = letra {letra | digito}.
	strConst 	= '"' {semAspas} '"'.
	num 		  = ['-'] digito { digito } .

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

	microc  = {DeclConst} {Definicao} .

  DeclConst = "const" Tipo id "=" num ";" .

	Definicao = ( Tipo | "void" ) DesigI ( DeclVar | DeclFuncao ) .

	DeclVar = {"," DesigI } ";" .

  DeclFuncao = "(" [ Tipo DesigI {"," Tipo  DesigI	} ] ")" CBlock .
	
	Tipo = "int" .		

	DesigI = id	.

	CBlock = "{" {Definicao | Instrucao} "}" .

	Instrucao = Designador ( Atrib | Parametros ) ";"                     
      | While | For | IfElse | Return | Printf | Scanf | CBlock | ";"
  .

	Atrib = "=" Expr .

	While = "while" "(" Condicao ")" Instrucao .

	For = "for"	"(" Designador Atrib ";" Condicao";" Designador Atrib ")" Instrucao .

	IfElse = "if" "(" Condicao ")"  Instrucao  ("else" Instrucao | ) .

	Return = "return" (Expr | ) ";".

	Printf = "printf" "(" ( strConst | Expr ) {"," ( strConst | Expr ) } ")" ";" .

  Scanf	= "scanf" "(" Designador ";" .

  Parametros = "("  [ Expr {"," Expr } ] ")" .

	Condicao = Expr OpRel Expr .

	OpRel	= "==" | "!=" | ">" | ">=" | "<" | "<=" .

	Expr = ( Termo | "-" Termo ) {( "+" | "-" ) Termo } .	

	Termo	= Fator {( "*" | "/" | "%" ) Fator } .

	Fator =  Designador [ Parametros ] | num | "(" Expr ")" .

	Designador = id .

END microc.

