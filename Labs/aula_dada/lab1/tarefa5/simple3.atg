COMPILER Simple

CHARACTERS
    digito = "0123456789".
    naoZero = "123456789".
    hexaDigito = "abcdefABCDEF".
    lMai = 'A'..'Z'.
    lMin = 'a'..'z'.
    letra = lMai + lMin.
    lf = '\n'.

TOKENS
    numero = naoZero {digito} | "0".
    hexa = ("0x"|"0X") {digito | hexaDigito}. 
    ident = letra {letra | digito}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE '\r' + '\t' + '\n'

PRODUCTIONS

    Simple	=	"program" ident "{"  {VarDecl} {FunDecl} "}".
    FunDecl	=	"void" ident "(" ")" "{" { VarDecl | Cmd} "}".
    VarDecl	=	Tipo ident {"," ident} ";".
    Tipo	=	"int" | "bool".
    Cmd     =	ident ( "=" Expr 
                      | "(" ")"
                      | ("++"|"--")) 
                ";"
            |	"if" "(" Expr ")" Cmd { "elif" "(" Expr ")" Cmd } [ "else" Cmd ]
            |	"for" ident "in" AriExpr ".." AriExpr Cmd
            |	"while" "(" Expr ")" Cmd
            |	"do" Cmd "while" "(" Expr ")" ";"
            |	"break" ";"
            |	"continue" ";"
            |	"read" ident ";"
            |	"write" Expr ";"
            |	("++"|"--") ident ";"
            |	"{" { VarDecl | Cmd } "}".
    Expr	=	AriExpr [RelOp AriExpr].
    AriExpr	=	Term {("+"|"-") Term}.
    Term	=	Fator {("*"|"/"|"%") Fator}.
    Fator	=	ident | numero | hexa | "true" | "false" 
            |   "-" Fator | "(" Expr ")".
    RelOp	=	"==" | "<" | ">" | "<=" | ">=".

END Simple.
